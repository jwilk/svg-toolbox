#!/usr/bin/env python3

# Copyright Â© 2018-2019 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import re
import sys
import lxml.etree as etree

ns = dict(svg='http://www.w3.org/2000/svg')

def ntag(prefix, tag):
    return '{' + ns[prefix] + '}' + tag

def fix_color(s):
    match = re.match(r'^rgb[(](\d+[.]\d+)%, (\d+[.]\d+)%, (\d+[.]\d+)%[)]$', s)
    result = ['#']
    for i in range(1, 4):
        v = match.group(i)
        v = float(v)
        v = int(15 * v / 100.0)
        v = '{0:x}'.format(v)
        result += [v]
    return ''.join(result)

def main():
    ap = argparse.ArgumentParser(usage='%(prog)s < SVGFILE')
    ap.parse_args()
    if sys.stdin.isatty():
        ap.error('stdin is a tty')
    doc = etree.parse(sys.stdin.buffer)
    px = py = -1e999
    width = 1e999
    for elt in doc.iterfind('//svg:text', namespaces=ns):
        x = int(elt.get('x'))
        y = int(elt.get('y'))
        if y == py:
            dx = x - px
            if dx < width:
                width = dx
        py = y
        px = x
    px = py = -1e999
    pelt = None
    for elt in doc.iter():
        if elt.tag == etree.Comment:
            elt.tail = '\n'
            elt.text = None
            continue
        if elt.tag == ntag('svg', 'desc'):
            elt.getparent().remove(elt)
        fill = elt.get('fill')
        if fill is not None:
            fill = fix_color(fill)
            elt.set('fill', fill)
        if elt.tag != ntag('svg', 'text'):
            elt.text = ''
        elt.tail = ''
    for elt in doc.iterfind('//svg:text', namespaces=ns):
        x = int(elt.get('x'))
        y = int(elt.get('y'))
        if y == py:
            dx = x - px
            if dx != width:
                pelt.tail = ' '
        py = y
        px = x
        pelt = elt
    elt = doc.getroot()
    elt.text = '\n'
    elt = elt.find('./svg:g', namespaces=ns)
    elt.set('font-family', 'monospace')
    elt.text = '\n'
    elt.tail = '\n'
    elt[-1].tail = '\n'
    doc.docinfo.clear()
    doc.write(sys.stdout.buffer, encoding='UTF-8')
    sys.stdout.buffer.write(b'\n')

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
